import os
from pathlib import Path

from .nks import read
from .aupreset import write


waldorf_channel_ids = [
    [0x00, 0x00, 0x00, 0x00], [0x3e, 0x12, 0x49, 0x25], [0x3e, 0x92, 0x49, 0x25], [0x3e, 0xdb, 0x6d, 0xb7],
    [0x3f, 0x12, 0x49, 0x25], [0x3f, 0x36, 0xdb, 0x6e], [0x3f, 0x5b, 0x6d, 0xb7], [0x3f, 0x80, 0x00, 0x00]
]

waldorf_program_ids = [
    [0x00, 0x00, 0x00, 0x00], [0x3c, 0x01, 0x02, 0x04], [0x3c, 0x81, 0x02, 0x04], [0x3c, 0xc1, 0x83, 0x06],
    [0x3d, 0x01, 0x02, 0x04], [0x3d, 0x21, 0x42, 0x85], [0x3d, 0x41, 0x83, 0x06], [0x3d, 0x61, 0xc3, 0x87],
    [0x3d, 0x81, 0x02, 0x04], [0x3d, 0x91, 0x22, 0x45], [0x3d, 0xa1, 0x42, 0x85], [0x3d, 0xb1, 0x62, 0xc6],
    [0x3d, 0xc1, 0x83, 0x06], [0x3d, 0xd1, 0xa3, 0x47], [0x3d, 0xe1, 0xc3, 0x87], [0x3d, 0xf1, 0xe3, 0xc8],
    [0x3e, 0x01, 0x02, 0x04], [0x3e, 0x09, 0x12, 0x24], [0x3e, 0x11, 0x22, 0x45], [0x3e, 0x19, 0x32, 0x65],
    [0x3e, 0x21, 0x42, 0x85], [0x3e, 0x29, 0x52, 0xa5], [0x3e, 0x31, 0x62, 0xc6], [0x3e, 0x39, 0x72, 0xe6],
    [0x3e, 0x41, 0x83, 0x06], [0x3e, 0x49, 0x93, 0x26], [0x3e, 0x51, 0xa3, 0x47], [0x3e, 0x59, 0xb3, 0x67],
    [0x3e, 0x61, 0xc3, 0x87], [0x3e, 0x69, 0xd3, 0xa7], [0x3e, 0x71, 0xe3, 0xc8], [0x3e, 0x79, 0xf3, 0xe8],
    [0x3e, 0x81, 0x02, 0x04], [0x3e, 0x85, 0x0a, 0x14], [0x3e, 0x89, 0x12, 0x24], [0x3e, 0x8d, 0x1a, 0x34],
    [0x3e, 0x91, 0x22, 0x45], [0x3e, 0x95, 0x2a, 0x55], [0x3e, 0x99, 0x32, 0x65], [0x3e, 0x9d, 0x3a, 0x75],
    [0x3e, 0xa1, 0x42, 0x85], [0x3e, 0xa5, 0x4a, 0x95], [0x3e, 0xa9, 0x52, 0xa5], [0x3e, 0xad, 0x5a, 0xb5],
    [0x3e, 0xb1, 0x62, 0xc6], [0x3e, 0xb5, 0x6a, 0xd6], [0x3e, 0xb9, 0x72, 0xe6], [0x3e, 0xbd, 0x7a, 0xf6],
    [0x3e, 0xc1, 0x83, 0x06], [0x3e, 0xc5, 0x8b, 0x16], [0x3e, 0xc9, 0x93, 0x26], [0x3e, 0xcd, 0x9b, 0x36],
    [0x3e, 0xd1, 0xa3, 0x47], [0x3e, 0xd5, 0xab, 0x57], [0x3e, 0xd9, 0xb3, 0x67], [0x3e, 0xdd, 0xbb, 0x77],
    [0x3e, 0xe1, 0xc3, 0x87], [0x3e, 0xe5, 0xcb, 0x97], [0x3e, 0xe9, 0xd3, 0xa7], [0x3e, 0xed, 0xdb, 0xb7],
    [0x3e, 0xf1, 0xe3, 0xc8], [0x3e, 0xf5, 0xeb, 0xd8], [0x3e, 0xf9, 0xf3, 0xe8], [0x3e, 0xfd, 0xfb, 0xf8],
    [0x3f, 0x01, 0x02, 0x04], [0x3f, 0x03, 0x06, 0x0c], [0x3f, 0x05, 0x0a, 0x14], [0x3f, 0x07, 0x0e, 0x1c],
    [0x3f, 0x09, 0x12, 0x24], [0x3f, 0x0b, 0x16, 0x2c], [0x3f, 0x0d, 0x1a, 0x34], [0x3f, 0x0f, 0x1e, 0x3c],
    [0x3f, 0x11, 0x22, 0x45], [0x3f, 0x13, 0x26, 0x4d], [0x3f, 0x15, 0x2a, 0x55], [0x3f, 0x17, 0x2e, 0x5d],
    [0x3f, 0x19, 0x32, 0x65], [0x3f, 0x1b, 0x36, 0x6d], [0x3f, 0x1d, 0x3a, 0x75], [0x3f, 0x1f, 0x3e, 0x7d],
    [0x3f, 0x21, 0x42, 0x85], [0x3f, 0x23, 0x46, 0x8d], [0x3f, 0x25, 0x4a, 0x95], [0x3f, 0x27, 0x4e, 0x9d],
    [0x3f, 0x29, 0x52, 0xa5], [0x3f, 0x2b, 0x56, 0xad], [0x3f, 0x2d, 0x5a, 0xb5], [0x3f, 0x2f, 0x5e, 0xbd],
    [0x3f, 0x31, 0x62, 0xc6], [0x3f, 0x33, 0x66, 0xce], [0x3f, 0x35, 0x6a, 0xd6], [0x3f, 0x37, 0x6e, 0xde],
    [0x3f, 0x39, 0x72, 0xe6], [0x3f, 0x3b, 0x76, 0xee], [0x3f, 0x3d, 0x7a, 0xf6], [0x3f, 0x3f, 0x7e, 0xfe],
    [0x3f, 0x41, 0x83, 0x06], [0x3f, 0x43, 0x87, 0x0e], [0x3f, 0x45, 0x8b, 0x16], [0x3f, 0x47, 0x8f, 0x1e],
    [0x3f, 0x49, 0x93, 0x26], [0x3f, 0x4b, 0x97, 0x2e], [0x3f, 0x4d, 0x9b, 0x36], [0x3f, 0x4f, 0x9f, 0x3e],
    [0x3f, 0x51, 0xa3, 0x47], [0x3f, 0x53, 0xa7, 0x4f], [0x3f, 0x55, 0xab, 0x57], [0x3f, 0x57, 0xaf, 0x5f],
    [0x3f, 0x59, 0xb3, 0x67], [0x3f, 0x5b, 0xb7, 0x6f], [0x3f, 0x5d, 0xbb, 0x77], [0x3f, 0x5f, 0xbf, 0x7f],
    [0x3f, 0x61, 0xc3, 0x87], [0x3f, 0x63, 0xc7, 0x8f], [0x3f, 0x65, 0xcb, 0x97], [0x3f, 0x67, 0xcf, 0x9f],
    [0x3f, 0x69, 0xd3, 0xa7], [0x3f, 0x6b, 0xd7, 0xaf], [0x3f, 0x6d, 0xdb, 0xb7], [0x3f, 0x6f, 0xdf, 0xbf],
    [0x3f, 0x71, 0xe3, 0xc8], [0x3f, 0x73, 0xe7, 0xd0], [0x3f, 0x75, 0xeb, 0xd8], [0x3f, 0x77, 0xef, 0xe0],
    [0x3f, 0x79, 0xf3, 0xe8], [0x3f, 0x7b, 0xf7, 0xf0], [0x3f, 0x7d, 0xfb, 0xf8], [0x3f, 0x80, 0x00, 0x00]
]


def convert_waldorf_nks():
    srcdir = "/Library/Audio/Presets/Waldorf/NKS/PPG Wave 3.V/nks_ContentDir/presets"
    destdir = "/Library/Audio/Presets/Waldorf/PPG Wave 3.V"

    if not os.path.exists(srcdir):
        return False

    for src in Path(srcdir).rglob('*.nksf'):
        nksf = read(src)
        assert len(nksf['NISI']['types']) == 1 and len(nksf['NISI']['types'][0]) == 1
        category = nksf['NISI']['types'][0][0].replace('/', ' and ')
        if nksf['NISI']['bankchain'][1] == 'PPG Wave 2.3 Hardware Unit Bank':
            category = '.'
        dest = os.path.join(destdir, *nksf['NISI']['bankchain'][1:], category, os.path.basename(src))[:-4] + \
            'aupreset'
        print(nksf['NISI']['bankchain'], nksf['NISI']['name'], nksf['NISI']['types'], dest,
              int(nksf['PCHK'][-1]), list(hex(i) for i in nksf['PCHK'][-1305:-1301]))

        # an export has the program number in the first byte, the NKS has it in the last byte.
        nksf['PCHK'] = bytearray(nksf['PCHK'])
        nksf['PCHK'][0] = nksf['PCHK'][-1]
        # set the program number of the first part
        nksf['PCHK'][-1305:-1301] = waldorf_program_ids[nksf['PCHK'][-1]]

        # make sure the parts are assigned to MIDI channels 1 through 8 (i.e. this is not a multi)
        channels = list(list(int(i) for i in nksf['PCHK'][i:i+4]) for i in range(-1301, -320, 140))
        assert channels == waldorf_channel_ids

        if not os.path.exists(os.path.dirname(dest)):
            os.makedirs(os.path.dirname(dest))
        write(nksf, dest)


if __name__ == '__main__':
    convert_waldorf_nks()
